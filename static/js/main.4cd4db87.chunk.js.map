{"version":3,"sources":["components/form/form.component.js","components/task-set/task-set.component.js","App.js","serviceWorker.js","index.js"],"names":["onSubmit","initialValue","useState","value","setValue","onChange","e","target","resetValue","useInputValue","text","preventDefault","title","todos","setTodos","addNew","setAddNew","useEffect","data","localStorage","getItem","JSON","parse","setItem","stringify","className","map","i","complete","key","onClick","todo","k","toggleComplete","style","textDecoration","filter","item","newDate","Date","toLocaleString","month","getDate","getFullYear","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sQAYe,cAAmB,IAAhBA,EAAe,EAAfA,SAAe,EAVX,SAAAC,GAAiB,IAAD,EACVC,mBAASD,GADC,mBAC7BE,EAD6B,KACtBC,EADsB,KAGpC,MAAO,CACLD,QACAE,SAAU,SAAAC,GAAC,OAAIF,EAASE,EAAEC,OAAOJ,QACjCK,WAAY,kBAAMJ,EAAS,MAKGK,CAAc,IAAtCD,EADuB,EACvBA,WAAeE,EADQ,8BAG/B,OACE,6BACI,0BACAV,SAAU,SAAAM,GACNA,EAAEK,iBACFX,EAASU,EAAKP,OACdK,MAGA,0BAAWE,M,sCCbR,cAAc,IAAZE,EAAW,EAAXA,MAAW,EACEV,mBAAS,IADX,mBACjBW,EADiB,KACVC,EADU,OAEIZ,oBAAS,GAFb,mBAEjBa,EAFiB,KAETC,EAFS,KA8BxB,OAZAC,qBAAU,WACN,IAAMC,EAAOC,aAAaC,QAAb,UAAwBR,IACjCM,GACAJ,EAASO,KAAKC,MAAMJ,MAEzB,IAEHD,qBAAU,WACRE,aAAaI,QAAb,UAAwBX,GAASS,KAAKG,UAAUX,OAKhD,yBAAKY,UAAU,WACb,wBAAIA,UAAU,SAASb,GACvB,6BACGC,EAAMa,KAAI,WAAqBC,GAArB,IAAGjB,EAAH,EAAGA,KAAMkB,EAAT,EAASA,SAAT,OACT,yBAAKH,UAAU,eAEPG,EACA,kBAAC,IAAD,CAAcH,UAAU,WACtB,kBAAC,IAAD,CAAUA,UAAU,WAI1B,yBACAA,UAAU,OACVI,IAAKnB,EACLoB,QAAS,kBAzCE,SAAAH,GAAC,OACtBb,EACED,EAAMa,KACJ,SAACK,EAAMC,GAAP,OACEA,IAAML,EAAN,2BAESI,GAFT,IAGMH,UAAWG,EAAKH,WAElBG,MAgCeE,CAAeN,IAC9BO,MAAO,CACHC,eAAgBP,EAAW,eAAiB,KAG3ClB,GAEL,4BAAQe,UAAU,YAAYK,QAAS,kBACnChB,EAASD,EAAMuB,QAAQ,SAAAC,GAAI,OAAIA,EAAK3B,OAASA,QAE7C,kBAAC,IAAD,YAKZ,yBAAKe,UAAU,WACX,4BAAQA,UAAU,UAAUK,QAAS,kBAAMd,GAAWD,KAAS,kBAAC,IAAD,OAC7DA,EACE,kBAAC,EAAD,CACAU,UAAU,OACVzB,SAAU,SAAAU,GACNI,EAAS,GAAD,mBAAKD,GAAL,CAAY,CAAEH,KAAMA,EAAMkB,UAAU,MAC5CZ,GAAWD,MAGb,QC9EH,G,MAAA,WAEb,IAAIuB,EAAU,IAAIC,KAElB,OACE,6BACE,kBAAC,EAAD,CAAS3B,MAAK,UAAK0B,EAAQE,eAAe,UAAW,CAAEC,MAAO,SAAhD,YAA6DH,EAAQI,UAArE,aAAmFJ,EAAQK,iBACzG,kBAAC,EAAD,CAAS/B,MAAM,qBCCDgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4cd4db87.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst useInputValue = initialValue => {\r\n  const [value, setValue] = useState(initialValue);\r\n\r\n  return {\r\n    value,\r\n    onChange: e => setValue(e.target.value),\r\n    resetValue: () => setValue(\"\")\r\n  };\r\n};\r\n\r\nexport default ({ onSubmit }) => {\r\n  const { resetValue, ...text } = useInputValue(\"\");\r\n\r\n  return (\r\n    <div>\r\n        <form\r\n        onSubmit={e => {\r\n            e.preventDefault();\r\n            onSubmit(text.value);\r\n            resetValue();\r\n        }}\r\n        >\r\n            <input {...text} />\r\n        </form>\r\n    </div>\r\n  );\r\n};","import React, { useState, useEffect } from 'react';\r\n\r\nimport Form from '../form/form.component'\r\n\r\nimport './task-set.styles.scss'\r\nimport { FaPlus } from 'react-icons/fa'\r\nimport { RiCloseLine } from 'react-icons/ri'\r\nimport { FiCircle } from 'react-icons/fi'\r\nimport { BsCircleFill } from 'react-icons/bs'\r\n\r\n\r\nexport default ({title}) => {\r\n    const [todos, setTodos] = useState([]);\r\n    const [addNew, setAddNew] = useState(false);\r\n\r\n\r\n    const toggleComplete = i =>\r\n      setTodos(\r\n        todos.map(\r\n          (todo, k) =>\r\n            k === i\r\n              ? {\r\n                  ...todo,\r\n                  complete: !todo.complete\r\n                }\r\n              : todo\r\n        )\r\n      );\r\n    \r\n    useEffect(() => {\r\n        const data = localStorage.getItem(`${title}`)\r\n        if (data) {\r\n            setTodos(JSON.parse(data))\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n      localStorage.setItem(`${title}`, JSON.stringify(todos))\r\n    })\r\n    \r\n\r\n    return (\r\n      <div className='taskset'>\r\n        <h1 className='title'>{title}</h1>\r\n        <div>\r\n          {todos.map(({ text, complete }, i) => (\r\n            <div className='class-block'>\r\n                {\r\n                    complete ?\r\n                    <BsCircleFill className='bullet' />\r\n                    : <FiCircle className='bullet' />\r\n                    \r\n\r\n                }\r\n                <div\r\n                className='task'\r\n                key={text}\r\n                onClick={() => toggleComplete(i)}\r\n                style={{\r\n                    textDecoration: complete ? \"line-through\" : \"\"\r\n                }}\r\n                >\r\n                    {text}\r\n                </div>\r\n                <button className='close-btn' onClick={() =>\r\n                    setTodos(todos.filter( item => item.text !== text))}\r\n                >\r\n                    <RiCloseLine/>\r\n                </button>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className='add-new'>\r\n            <button className='add-btn' onClick={() => setAddNew(!addNew)}><FaPlus/></button>\r\n            { addNew ? \r\n                <Form\r\n                className='form'\r\n                onSubmit={text => {\r\n                    setTodos([...todos, { text: text, complete: false }])\r\n                    setAddNew(!addNew)\r\n                }}\r\n                />\r\n                : null\r\n            }\r\n        </div>\r\n      </div>\r\n    );\r\n  };","import React from 'react';\nimport TaskSet from './components/task-set/task-set.component'\nimport './App.css'\n\nexport default () => {\n\n  let newDate = new Date()\n\n  return (\n    <div>\n      <TaskSet title={`${newDate.toLocaleString('default', { month: 'long' })} ${newDate.getDate()}, ${newDate.getFullYear()}`}/>\n      <TaskSet title=\"Miscellaneous\"/>\n    </div>\n  )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}